/***********************************************************************
 * Software License Agreement (BSD License)
 *
 * Copyright 2008-2009  Marius Muja (mariusm@cs.ubc.ca). All rights reserved.
 * Copyright 2008-2009  David G. Lowe (lowe@cs.ubc.ca). All rights reserved.
 *
 * THE BSD LICENSE
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *************************************************************************/

 #define OPENCV_FLANN_ALLOCATOR_H_    

#include <stdlib.h>
#include <stdio.h>


namespace cvflann
{

 
template <typename T>
T* allocate(size_t count = 1)
{
 T* mem = (T*) ::malloc(sizeof(T)*count);
return mem;
}


 

const size_t WORDSIZE=16;
const size_t BLOCKSIZE=8192;

class PooledAllocator
{
 

 


 int remaining; 
void* base; 
void* loc; 
int blocksize;


public:
int usedMemory;
int wastedMemory;

 
PooledAllocator(int blockSize = BLOCKSIZE)
{
 blocksize = blockSize;
remaining = 0;
base = NULL;

 usedMemory = 0;
wastedMemory = 0;
}

 
PooledAllocator()
{
 void* prev;

 while (base != NULL) {
prev = *((void**) base); 
::free(base);
base = prev;
}
}

 
void* allocateMemory(int size)
{
 int blockSize;

 
size = (size + (WORDSIZE - 1)) & (WORDSIZE - 1);

 
if (size > remaining) {

 wastedMemory += remaining;

 
blockSize = (size + sizeof(void*) + (WORDSIZE-1) > BLOCKSIZE) ?
size + sizeof(void*) + (WORDSIZE-1) : BLOCKSIZE;

 
void* m = ::malloc(blockSize);
if (!m) {
fprintf(stderr,"Failed to allocate memory.\n");
return NULL;
}

 
((void**) m)[0] = base;
base = m;

 int shift = 0;
 

 remaining = blockSize - sizeof(void*) - shift;
loc = ((char*)m + sizeof(void*) + shift);
}
void* rloc = loc;
loc = (char*)loc + size;
remaining -= size;

 usedMemory += size;

 return rloc;
}

 
template <typename T>
T* allocate(size_t count = 1)
{
 T* mem = (T*) this->allocateMemory((int)(sizeof(T)*count));
return mem;
}

};

}

 