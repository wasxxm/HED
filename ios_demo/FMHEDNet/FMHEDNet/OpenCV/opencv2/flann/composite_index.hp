/***********************************************************************
 * Software License Agreement (BSD License)
 *
 * Copyright 2008-2009  Marius Muja (mariusm@cs.ubc.ca). All rights reserved.
 * Copyright 2008-2009  David G. Lowe (lowe@cs.ubc.ca). All rights reserved.
 *
 * THE BSD LICENSE
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *************************************************************************/

 #define OPENCV_FLANN_COMPOSITE_INDEX_H_    

#include "general.h"
#include "nn_index.h"
#include "kdtree_index.h"
#include "kmeans_index.h"

namespace cvflann
{

 
struct CompositeIndexParams : public IndexParams
{
 CompositeIndexParams(int trees = 4, int branching = 32, int iterations = 11,
flann_centers_init_t centers_init = FLANN_CENTERS_RANDOM, float cb_index = 0.2 )
{
 (*this)["algorithm"] = FLANN_INDEX_KMEANS;
 
(*this)["trees"] = trees;

(*this)["branching"] = branching;
 
(*this)["iterations"] = iterations;
 
(*this)["centers_init"] = centers_init;
 
(*this)["cb_index"] = cb_index;
}
};


 
template <typename Distance>
class CompositeIndex : public NNIndex<Distance>
{
public:
typedef typename Distance::ElementType ElementType;
typedef typename Distance::ResultType DistanceType;

 
CompositeIndex(const Matrix<ElementType>& inputData, const IndexParams& params = CompositeIndexParams(),
Distance d = Distance()) : index_params_(params)
{
 kdtree_index_ = new KDTreeIndex<Distance>(inputData, params, d);
kmeans_index_ = new KMeansIndex<Distance>(inputData, params, d);

 }

 CompositeIndex(const CompositeIndex&);
CompositeIndex& operator=(const CompositeIndex&);

 virtual CompositeIndex()
{
 delete kdtree_index_;
delete kmeans_index_;
}

 
flann_algorithm_t getType() const
{
 return FLANN_INDEX_COMPOSITE;
}

 
size_t size() const
{
 return kdtree_index_->size();
}

 
size_t veclen() const
{
 return kdtree_index_->veclen();
}

 
int usedMemory() const
{
 return kmeans_index_->usedMemory() + kdtree_index_->usedMemory();
}

 
void addIndex(const Matrix<ElementType>& , const Matrix<ElementType>& )
{
}

 
void buildIndex()
{
 Logger::info("Building kmeans tree...\n");
kmeans_index_->buildIndex();
Logger::info("Building kdtree tree...\n");
kdtree_index_->buildIndex();
}

 
void saveIndex(FILE* stream)
{
 kmeans_index_->saveIndex(stream);
kdtree_index_->saveIndex(stream);
}

 
void loadIndex(FILE* stream)
{
 kmeans_index_->loadIndex(stream);
kdtree_index_->loadIndex(stream);
}

 
IndexParams getParameters() const
{
 return index_params_;
}

 
void findNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, const SearchParams& searchParams)
{
 kmeans_index_->findNeighbors(result, vec, searchParams);
kdtree_index_->findNeighbors(result, vec, searchParams);
}

private:
 
KMeansIndex<Distance>* kmeans_index_;

 
KDTreeIndex<Distance>* kdtree_index_;

 
const IndexParams index_params_;
};

}

 